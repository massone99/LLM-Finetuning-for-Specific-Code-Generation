[
  {
    "conversations": [
      {
        "from": "human",
        "value": "Create an Akka Actor in Scala that receives a message and sends the same messageback to the sender."
      },
      {
        "from": "assistant",
        "value": "import akka.actor.{Actor, ActorSystem, Props}\n\n// Define the EchoActor\nclass EchoActor extends Actor {\n  def receive: Receive = {\n    case msg => sender() ! msg\n  }\n}\n\n// Usage Example\nobject EchoApp extends App {\n  val system = ActorSystem(\"EchoSystem\")\n  val echoActor = system.actorOf(Props[EchoActor], \"echoActor\")\n\n  echoActor ! \"Hello, Actor!\"\n}"
      }
    ]
  },
  {
    "conversations": [
      {
        "from": "human",
        "value": "Implement an Akka Actor in Scala that maintains a counter. It should handle two messages: one to increment the counter and another to retrieve its current value."
      },
      {
        "from": "assistant",
        "value": "import akka.actor.{Actor, ActorSystem, Props}\n\n// Messages\ncase object Increment\ncase object GetCount\n\n// Define the CounterActor\nclass CounterActor extends Actor {\n  var count = 0\n\n  def receive: Receive = {\n    case Increment =>\n      count += 1\n    case GetCount =>\n      sender() ! count\n  }\n}\n\n// Usage Example\nobject CounterApp extends App {\n  val system = ActorSystem(\"CounterSystem\")\n  val counter = system.actorOf(Props[CounterActor], \"counter\")\n\n  counter ! Increment\n  counter ! Increment\n  counter ! GetCount\n}"
      }
    ]
  },
  {
    "conversations": [
      {
        "from": "human",
        "value": "Create an Akka Supervisor Actor in Scala that supervises a child actor. The supervisor should restart the child in case of any failure"
      },
      {
        "from": "assistant",
        "value": "import akka.actor.{Actor, ActorRef, ActorSystem, OneForOneStrategy, Props, SupervisorStrategy, Terminated}\nimport akka.actor.SupervisorStrategy._\n\nimport scala.concurrent.duration._\n\n// Define the ChildActor\nclass ChildActor extends Actor {\n  def receive: Receive = {\n    case \"fail\" => throw new Exception(\"Child failed!\")\n    case msg    => println(s\"Child received: $msg\")\n  }\n}\n\n// Define the SupervisorActor\nclass SupervisorActor extends Actor {\n  override val supervisorStrategy: SupervisorStrategy = OneForOneStrategy(\n    maxNrOfRetries = 3,\n    withinTimeRange = 1.minute\n  ) {\n    case _: Exception => Restart\n  }\n\n  val child: ActorRef = context.actorOf(Props[ChildActor], \"childActor\")\n\n  def receive: Receive = {\n    case msg =>\n      child.forward(msg)\n  }\n}\n\n// Usage Example\nobject SupervisorApp extends App {\n  val system = ActorSystem(\"SupervisorSystem\")\n  val supervisor = system.actorOf(Props[SupervisorActor], \"supervisor\")\n\n  supervisor ! \"Hello\"\n  supervisor ! \"fail\"\n  supervisor ! \"Are you there?\"\n}"
      }
    ]
  },
  {
    "conversations": [
      {
        "from": "human",
        "value": "Develop an Akka Router Actor in Scala that distributes incoming messages to a pool of worker actors using a round-robin strategy."
      },
      {
        "from": "assistant",
        "value": "import akka.actor.{Actor, ActorRef, ActorSystem, Props}\nimport akka.routing.RoundRobinPool\n\n// Define the WorkerActor\nclass WorkerActor extends Actor {\n  def receive: Receive = {\n    case msg => println(s\"${self.path.name} processed message: $msg\")\n  }\n}\n\n// Usage Example\nobject RouterApp extends App {\n  val system = ActorSystem(\"RouterSystem\")\n  \n  // Create a router with 5 worker actors\n  val router: ActorRef = system.actorOf(\n    RoundRobinPool(5).props(Props[WorkerActor]),\n    \"workerRouter\"\n  )\n\n  // Send messages to the router\n  for (i <- 1 to 10) {\n    router ! s\"Message $i\"\n  }\n}"
      }
    ]
  },
  {
    "conversations": [
      {
        "from": "human",
        "value": "Implement an Akka Persistent Actor in Scala that records events to maintain state across restarts. The actor should handle commands to add items and retrieve the current list of items."
      },
      {
        "from": "assistant",
        "value": "import akka.actor.{ActorSystem, Props}\nimport akka.persistence.{PersistentActor, SnapshotOffer}\n\n// Commands and Events\nsealed trait Command\ncase class AddItem(item: String) extends Command\ncase object GetItems extends Command\n\nsealed trait Event\ncase class ItemAdded(item: String) extends Event\n\n// Define the Persistent Actor\nclass ShoppingCart extends PersistentActor {\n  override def persistenceId: String = \"shopping-cart-1\"\n\n  var items: List[String] = Nil\n\n  def updateState(event: Event): Unit = event match {\n    case ItemAdded(item) => items ::= item\n  }\n\n  def receiveCommand: Receive = {\n    case AddItem(item) =>\n      persist(ItemAdded(item)) { event =>\n        updateState(event)\n        println(s\"Added item: $item\")\n      }\n    case GetItems =>\n      sender() ! items.reverse\n  }\n\n  def receiveRecover: Receive = {\n    case event: Event => updateState(event)\n    case SnapshotOffer(_, snapshot: List[String]) =>\n      items = snapshot\n  }\n}\n\n// Usage Example\nobject PersistentActorApp extends App {\n  val system = ActorSystem(\"PersistentSystem\")\n  val cart = system.actorOf(Props[ShoppingCart], \"shoppingCart\")\n\n  cart ! AddItem(\"Apple\")\n  cart ! AddItem(\"Banana\")\n  cart ! GetItems\n}"
      }
    ]
  },
  {
    "conversations": [
      {
        "from": "human",
        "value": "Create an Akka Actor in Scala that performs a periodic task every 5 seconds, such as printing a heartbeat message."
      },
      {
        "from": "assistant",
        "value": "import akka.actor.{Actor, ActorSystem, Props}\nimport scala.concurrent.duration._\n\ncase object Tick\n\n// Define the HeartbeatActor\nclass HeartbeatActor extends Actor {\n  import context.dispatcher\n  context.system.scheduler.scheduleWithFixedDelay(0.seconds, 5.seconds, self, Tick)\n\n  def receive: Receive = {\n    case Tick =>\n      println(\"Heartbeat: I'm alive!\")\n  }\n}\n\n// Usage Example\nobject HeartbeatApp extends App {\n  val system = ActorSystem(\"HeartbeatSystem\")\n  val heartbeatActor = system.actorOf(Props[HeartbeatActor], \"heartbeatActor\")\n}"
      }
    ]
  },
  {
    "conversations": [
      {
        "from": "human",
        "value": "Implement an Akka Actor in Scala that can handle different types of messages, such as strings, integers, and custom case classes, performing different actions based on the message type."
      },
      {
        "from": "assistant",
        "value": "import akka.actor.{Actor, ActorSystem, Props}\n\n// Define custom messages\ncase class Greet(name: String)\ncase class Calculate(a: Int, b: Int)\n\n// Define the MultiMessageActor\nclass MultiMessageActor extends Actor {\n  def receive: Receive = {\n    case msg: String =>\n      println(s\"Received string message: $msg\")\n    case Greet(name) =>\n      println(s\"Hello, $name!\")\n    case Calculate(a, b) =>\n      println(s\"The sum of $a and $b is ${a + b}\")\n    case _ =>\n      println(\"Unknown message received.\")\n  }\n}\n\n// Usage Example\nobject MultiMessageApp extends App {\n  val system = ActorSystem(\"MultiMessageSystem\")\n  val multiActor = system.actorOf(Props[MultiMessageActor], \"multiActor\")\n\n  multiActor ! \"A simple string\"\n  multiActor ! Greet(\"Alice\")\n  multiActor ! Calculate(5, 7)\n  multiActor ! 42 // This will trigger the unknown message case\n}"
      }
    ]
  },
  {
    "conversations": [
      {
        "from": "human",
        "value": "Create an Akka Actor in Scala that communicates with multiple other actors, sending messages and aggregating responses."
      },
      {
        "from": "assistant",
        "value": "import akka.actor.{Actor, ActorRef, ActorSystem, Props}\n\n// Define worker actors\nclass Worker(id: Int) extends Actor {\n  def receive: Receive = {\n    case \"work\" =>\n      sender() ! s\"Worker $id completed work.\"\n  }\n}\n\n// Define the ManagerActor\nclass Manager(numWorkers: Int) extends Actor {\n  // Create worker actors\n  val workers: IndexedSeq[ActorRef] = for (i <- 1 to numWorkers) yield {\n    context.actorOf(Props(new Worker(i)), s\"worker$i\")\n  }\n\n  def receive: Receive = {\n    case \"start\" =>\n      workers.foreach(_ ! \"work\")\n    case msg =>\n      println(s\"Manager received: $msg\")\n  }\n}\n\n// Usage Example\nobject ManagerApp extends App {\n  val system = ActorSystem(\"ManagerSystem\")\n  val manager = system.actorOf(Props(new Manager(3)), \"manager\")\n\n  manager ! \"start\"\n}"
      }
    ]
  },
  {
    "conversations": [
      {
        "from": "human",
        "value": "Implement an Akka Actor in Scala that changes its behavior based on the messages it receives using context.become"
      },
      {
        "from": "assistant",
        "value": "import akka.actor.{Actor, ActorSystem, Props}\n\n// Define the ToggleActor\nclass ToggleActor extends Actor {\n  def active: Receive = {\n    case \"toggle\" =>\n      println(\"Switching to inactive state.\")\n      context.become(inactive)\n    case msg =>\n      println(s\"Active state received: $msg\")\n  }\n\n  def inactive: Receive = {\n    case \"toggle\" =>\n      println(\"Switching to active state.\")\n      context.become(active)\n    case msg =>\n      println(s\"Inactive state received: $msg\")\n  }\n\n  def receive: Receive = active\n}\n\n// Usage Example\nobject ToggleApp extends App {\n  val system = ActorSystem(\"ToggleSystem\")\n  val toggleActor = system.actorOf(Props[ToggleActor], \"toggleActor\")\n\n  toggleActor ! \"Hello\"\n  toggleActor ! \"toggle\"\n  toggleActor ! \"World\"\n  toggleActor ! \"toggle\"\n  toggleActor ! \"Back to active\"\n}"
      }
    ]
  },
  {
    "conversations": [
      {
        "from": "human",
        "value": "Create an Akka Actor in Scala that uses the ask pattern to send a message and wait for a response asynchronously."
      },
      {
        "from": "assistant",
        "value": "import akka.actor.{Actor, ActorSystem, Props}\nimport akka.pattern.ask\nimport akka.util.Timeout\n\nimport scala.concurrent.duration._\nimport scala.concurrent.Await\nimport scala.concurrent.ExecutionContext.Implicits.global\n\n// Define the ResponderActor\nclass ResponderActor extends Actor {\n  def receive: Receive = {\n    case msg: String =>\n      sender() ! s\"Received your message: $msg\"\n  }\n}\n\n// Usage Example\nobject AskPatternApp extends App {\n  val system = ActorSystem(\"AskPatternSystem\")\n  val responder = system.actorOf(Props[ResponderActor], \"responder\")\n\n  implicit val timeout: Timeout = Timeout(5.seconds)\n  val future = responder ? \"Hello via ask pattern\"\n\n  val result = Await.result(future, timeout.duration).asInstanceOf[String]\n  println(result)\n\n  system.terminate()\n}"
      }
    ]
  }
]