import akka.actor.{Actor, ActorRef, ActorSystem, Props}

// Define the StashingActor
class StashingActor extends Actor {
  var stash: Seq[Any] = Seq.empty

  def receive: Receive = {
    case "initialize" =>
      println(s"${self.path.name} processing stash:")
      stash.foreach(self.process_)
      stash = Seq.empty
    case msg =>
      stash = msg :: stash
      println(s"${self.path.name} stored message: $msg")
  }

  def process(msg: Any): Unit = {
    println(s"${self.path.name} processed message: $msg")
  }
}

// Usage Example (for testing purposes)
object StashingActorApp extends App {
  val system = ActorSystem("StashingActorSystem")
  val stashActor = system.actorOf(Props(new StashingActor()), "stashActor")

  // Send multiple messages
  stashActor! "Message 1"
  stashActor! "Message 2"
  stashActor! "Message 3"
  stashActor! "Initialize"
  stashActor! "Message 4"
  stashActor! "Message 5"

  // Allow some time for processing before shutdown
  Thread.sleep(1000)
  system.terminate()
}