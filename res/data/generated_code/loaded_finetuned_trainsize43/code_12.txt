import akka.actor.{Actor, ActorSystem, Props}

// Define the LifecycleActor
class LifecycleActor extends Actor {
  def receive: Receive = {
    case "start" =>
      println(s"${self.path.name} received'start' message.")
    case "shutdown" =>
      println(s"${self.path.name} received shutdown request. Stopping.")
      context.stop(self)
    case msg =>
      println(s"${self.path.name} received unknown message: $msg")
  }
}

// Usage Example (for testing purposes)
object LifecycleApp extends App {
  val system = ActorSystem("LifecycleSystem")
  val lifecycleActor = system.actorOf(Props[LifecycleActor](), "lifecycleActor")

  lifecycleActor! "start"
  lifecycleActor! "shutdown"
  lifecycleActor! "unknown"

  lifecycleActor! "start" // Should trigger postStart

  lifecycleActor! "shutdown" // Should be processed again, leading to shutdown
}