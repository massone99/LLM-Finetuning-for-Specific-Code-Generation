import akka.actor.{Actor, ActorSystem, Props, Cancellable}
import scala.concurrent.duration._
import akka.scheduler.ThreadPoolScheduler

// Define the SelfMessageActor
class SelfMessageActor extends Actor {
  import context.dispatcher

  // Schedule the next tick every second
  val tickTimeout: FiniteDuration = 1.second
  val nextTick: Cancellable = context.system.scheduler.scheduleWithFixedDelay(
    initialDelay = 0.seconds,
    delay = tickTimeout,
    receiver = self,
    message = "tick"
  )

  def receive: Receive = {
    case "tick" =>
      println("Tick received.")
    case msg =>
      println(s"SelfMessageActor received message: $msg")
  }

  override def postStop(): Unit = {
    nextTick.cancel()
    super.postStop()
  }
}

// Usage Example (for testing purposes)
object SelfMessageActorApp extends App {
  val system = ActorSystem("SelfMessageActorSystem")
  val selfMessageActor = system.actorOf(Props(new SelfMessageActor()), "selfMessageActor")

  // Allow some time for processing before shutdown
  Thread.sleep(10000)
  system.terminate()
}