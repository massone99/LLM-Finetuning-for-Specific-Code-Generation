import akka.actor.{Actor, ActorSystem, Props, Cancellable}
import akka.actor.DeadLetter

// Define the DeadLetterMonitor Actor
class DeadLetterMonitor extends Actor {
  def receive: Receive = {
    case msg: String =>
      println(s"DeadLetterMonitor received unhandled message: $msg")
    case _ =>
      println("DeadLetterMonitor received unknown message.")
  }
}

// Usage Example (for testing purposes)
object DeadLetterMonitorApp extends App {
  val system = ActorSystem("DeadLetterMonitorSystem")
  val deadLetterMonitor = system.actorOf(Props[DeadLetterMonitor](), "deadLetterMonitor")

  // Define a simple DeadLetterHandler to send messages to the monitor
  class DeadLetterHandler extends Actor {
    def receive: Receive = {
      case msg: String =>
        println(s"Sending dead letter: $msg")
        deadLetterMonitor! msg
      case _ =>
        println("DeadLetterHandler received unknown message.")
    }
  }

  val deadLetterHandler = system.actorOf(Props[DeadLetterHandler](), "deadLetterHandler")

  // Send a message to a non-existent actor (which should reach DeadLetterMonitor)
  deadLetterHandler! "Hello DeadLetter!"

  // Allow some time for processing before shutdown
  Thread.sleep(1000)
  system.terminate()
}