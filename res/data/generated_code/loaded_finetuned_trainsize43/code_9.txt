import akka.actor.{Actor, ActorRef, ActorSystem, Props}
import akka.actor.DeadLetter
import akka.pattern.ask
import akka.util.Timeout
import scala.concurrent.duration._
import scala.util.{Success, Failure}

// Define the DeadLetterMonitor Actor
class DeadLetterMonitor extends Actor {
  def receive: Receive = {
    case msg: String =>
      println(s"DeadLetterMonitor received unhandled message: $msg")
  }
}

// Usage Example (for testing purposes)
object DeadLetterMonitorApp extends App {
  val system = ActorSystem("DeadLetterMonitorSystem")
  val monitor = system.actorOf(Props[DeadLetterMonitor](), "deadLetterMonitor")

  implicit val timeout: Timeout = Timeout(5.seconds)

  // Define a simple DeadLetter sender
  class DeadLetterSender extends Actor {
    def receive: Receive = {
      case msg: String =>
        println(s"DeadLetterSender sending message: $msg")
        monitor! msg
    }
  }

  val deadLetterSender = system.actorOf(Props[DeadLetterSender](), "deadLetterSender")

  // Attempt to send a message to a non-existent actor
  val future = deadLetterSender? "UnknownMessage"
  future.onComplete {
    case Success(res) =>
      println(s"DeadLetterMonitor received message: ${res.toString}")
    case Failure(exc) =>
      println(s"Error occurred: ${exc.getMessage}")
  }

  // Allow some time for processing before shutdown
  Thread.sleep(2000)
  system.terminate()
}