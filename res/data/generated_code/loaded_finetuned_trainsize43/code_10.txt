import akka.actor.{Actor, ActorRef, ActorSystem, Props}

// Define the ChildActor
class ChildActor(name: String) extends Actor {
  def receive: Receive = {
    case msg: String =>
      println(s"Child Actor [$name] received message: $msg from Parent.")
    case _ =>
      println(s"Child Actor [$name] received unknown message.")
  }
}

// Define the ParentActor
class ParentActor extends Actor {
  var childActors: Set[ActorRef] = Set.empty

  def receive: Receive = {
    case name: String =>
      // Create a new child actor if it doesn't exist
      if (!childActors.contains(name)) {
        val child = context.actorOf(Props(new ChildActor(name)), name)
        childActors += child
        println(s"Parent Actor created Child Actor with name: '$name'")
      }
    case msg: String =>
      childActors.forEach(_! msg)
    case _ =>
      println("Parent Actor received unknown message.")
  }
}

// Usage Example (for testing purposes)
object ParentActorApp extends App {
  val system = ActorSystem("ParentActorSystem")
  val parent = system.actorOf(Props[ParentActor](), "parentActor")

  // Create child actors
  val child1 = parent.actorOf(Props[ChildActor]("child1"), "child1")
  val child2 = parent.actorOf(Props[ChildActor]("child2"), "child2")
  val child3 = parent.actorOf(Props[ChildActor]("child3"), "child3")

  // Send messages to child actors
  parent! "Hello Child 1!"
  parent! "Hello Child 2!"
  parent! "Hello Child 3!"

  // Allow some time for processing before shutdown
  Thread.sleep(1000)
  system.terminate()
}