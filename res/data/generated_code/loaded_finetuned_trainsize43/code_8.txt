import akka.actor.{Actor, ActorRef, ActorSystem, Props}

// Define messages
case object Ping
case object Pong

// Define the PingActor
class PingActor(pongActor: ActorRef) extends Actor {
  def receive: Receive = {
    case Ping =>
      println(s"${self.path.name} sends Ping to $pongActor")
      pongActor! Pong
    case Pong =>
      println(s"${self.path.name} received Pong from $pongActor. Sending another Ping.")
      sender()! Ping
    case msg =>
      println(s"${self.path.name} received unknown message: $msg")
  }
}

// Define the PongActor
class PongActor(ref: ActorRef) extends Actor {
  def receive: Receive = {
    case Ping =>
      println(s"${self.path.name} received Ping from $ref. Sending Pong.")
      sender()! Pong
    case Pong =>
      println(s"${self.path.name} already received a Pong. Continuing exchange.")
      self.forward(Ping) // Send Ping to continue
    case msg =>
      println(s"${self.path.name} received unknown message: $msg")
  }
}

// Usage Example (for testing purposes)
object PingPongApp extends App {
  val system = ActorSystem("PingPongSystem")
  
  val pongActor = system.actorOf(Props[PongActor](ref = system.actorOf(Props[PingActor(pongActor)), "pongActor")), "pongActor")
  
  val pingActor = system.actorOf(Props[PingActor(pongActor)], "pingActor")
  
  pingActor! Ping
  pingActor! Ping
}