import akka.actor.{Actor, ActorRef, ActorSystem, Props}

// Define the ResponderActor
class ResponderActor extends Actor {
  def receive: Receive = {
    case "Greet" => {
      sender()! "Hello, sender!"
    }
    case _ =>
      println("ResponderActor received unknown message.")
  }
}

// Define the SenderActor
class SenderActor(responder: ActorRef) extends Actor {
  def receive: Receive = {
    case msg: String =>
      responder! msg
    case _ =>
      println("SenderActor received unknown message.")
  }
}

// Usage Example (for testing purposes)
object ResponderApp extends App {
  val system = ActorSystem("ResponderSystem")
  
  val responder = system.actorOf(Props(new ResponderActor()), "responderActor")
  val sender = system.actorOf(Props(new SenderActor(responder)), "senderActor")
  
  // Send a Greet message
  sender! "Greet"
  
  // Allow some time for processing before shutdown
  Thread.sleep(1000)
  system.terminate()
}