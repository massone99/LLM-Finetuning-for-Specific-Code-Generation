import akka.actor.{Actor, ActorRef, ActorSystem, Props}

// Define messages
case class LogMessage(msg: String)

// Define the LoggingActor
class LoggingActor extends Actor {
  import context.dispatcher

  def receive: Receive = {
    case LogMessage(msg) =>
      val level = msg.toLowerCase.matchPattern {
        case "info" => println("INFO: " + msg)
        case "warn" => println("WARNING: " + msg)
        case "error" => println("ERROR: " + msg)
        case _ => println("DEBUG: " + msg)
      }
    case _ =>
      println("LoggingActor received unknown message.")
  }
}

// Usage Example
object LoggingApp extends App {
  val system = ActorSystem("LoggingSystem")
  val loggingActor = system.actorOf(Props(new LoggingActor()), "loggingActor")

  // Send log messages
  loggingActor! LogMessage("This is an info message.")
  loggingActor! LogMessage("This will be logged as a warning.")
  loggingActor! LogMessage("This will cause an error since it doesn't match.")
  loggingActor! LogMessage("This will be logged as debug.")
  loggingActor! LogMessage("This is unknown.") // Should be debug
}