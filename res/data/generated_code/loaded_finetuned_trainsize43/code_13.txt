import akka.actor.{Actor, ActorRef, ActorSystem, Props}

// Define messages
case class IntMessage(num: Int)
case class Response(msg: String)

// Define the FilterActor
class FilterActor extends Actor {
  def receive: Receive = {
    case IntMessage(num) =>
      if (num > 10) {
        sender()! Response(s"Accepted: $num")
      } else {
        sender()! Response(s"Rejected: $num")
      }
    case _ =>
      sender()! Response("Unknown message.")
  }
}

// Usage Example (for testing purposes)
object FilterActorApp extends App {
  val system = ActorSystem("FilterActorSystem")
  val filterActor = system.actorOf(Props(new FilterActor()), "filterActor")

  // Define a simple responder actor to handle responses
  class ResponderActor extends Actor {
    def receive: Receive = {
      case Response(msg) =>
        println(s"ResponderActor received: $msg")
      case _ =>
        println("ResponderActor received unknown message.")
    }
  }

  val responder = system.actorOf(Props(new ResponderActor()), "responderActor")

  // Send integer messages
  filterActor! IntMessage(12)
  filterActor! IntMessage(7)
  filterActor! IntMessage(12)

  // Send non-integer messages
  filterActor! "Fourteen"       // String
  filterActor! 21.5              // Double
  filterActor! true               // Boolean
  filterActor! 'A'               // Character

  // Allow some time for processing before shutdown
  Thread.sleep(1000)
  system.terminate()
}