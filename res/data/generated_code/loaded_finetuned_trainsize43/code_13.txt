import akka.actor.{Actor, ActorSystem, Props}

// Define the FilterActor
class FilterActor extends Actor {
  def receive: Receive = {
    case num: Int =>
      if (num > 10) {
        sender()! s"Accepted: $num"
      } else {
        sender()! s"Rejected: $num"
      }
    case _ =>
      sender()! "Unknown message."
  }
}

// Usage Example (for testing purposes)
object FilterActorApp extends App {
  val system = ActorSystem("FilterActorSystem")
  val filterActor = system.actorOf(Props[FilterActor](), "filterActor")

  // Send a mix of integers and other messages
  filterActor! 5   // Rejected: 5
  filterActor! 15   // Accepted: 15
  filterActor! "Foo" // Unknown message.
  filterActor! 20   // Accepted: 20
  filterActor! 25   // Accepted: 25
  filterActor! 8    // Rejected: 8

  // Allow some time for processing before shutdown
  Thread.sleep(1000)
  system.terminate()
}