import akka.actor.{Actor, ActorRef, ActorSystem, Props}

// Define messages
case class HighPriority(msg: String)
case class LowPriority(msg: String)

// Define the PriorityActor
class PriorityActor extends Actor {
  val priorityMailbox: ActorRef = context.actorOf(Props(new PriorityMailbox()), "priorityMailbox")

  def receive: Receive = {
    case HighPriority(msg) =>
      priorityMailbox! msg
    case LowPriority(msg) =>
      priorityMailbox! msg
  }
}

// Define the Priority Mailbox
class PriorityMailbox extends Actor {
  def receive: Receive = {
    case msg =>
      println(s"PriorityMailbox: Processing message '$msg'")
  }
}

// Usage Example
object PriorityApp extends App {
  val system = ActorSystem("PrioritySystem")
  val priorityActor = system.actorOf(Props(new PriorityActor()), "priorityActor")

  // Send messages of different types
  priorityActor! HighPriority("Ship urgent package")
  priorityActor! LowPriority("Send invoice")
  priorityActor! HighPriority("Process tax return")
  priorityActor! LowPriority("Schedule maintenance")

  // Allow some time for processing before shutdown
  Thread.sleep(1000)
  system.terminate()
}